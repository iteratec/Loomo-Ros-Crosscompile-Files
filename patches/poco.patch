--- libs/poco-1.6.1/Foundation/include/Poco/SharedLibrary.h
+++ libs/poco-1.6.1/Foundation/include/Poco/SharedLibrary.h
@@ -23,7 +23,9 @@
 #include "Poco/Foundation.h"
 
 
-#if defined(hpux) || defined(_hpux)
+#if defined(POCO_ANDROID_STATIC)
+#include "Poco/SharedLibrary_UNIX.h"
+#elif defined(hpux) || defined(_hpux)
 #include "Poco/SharedLibrary_HPUX.h"
 #elif defined(POCO_VXWORKS)
 #include "Poco/SharedLibrary_VX.h"
--- libs/poco-1.6.1/Foundation/src/SharedLibrary.cpp
+++ libs/poco-1.6.1/Foundation/src/SharedLibrary.cpp
@@ -18,7 +18,9 @@
 #include "Poco/Exception.h"
 
 
-#if defined(hpux) || defined(_hpux)
+#if defined(POCO_ANDROID_STATIC)
+#include "SharedLibrary_ANDROID_STATIC.cpp"
+#elif defined(hpux) || defined(_hpux)
 #include "SharedLibrary_HPUX.cpp"
 #elif defined(POCO_VXWORKS)
 #include "SharedLibrary_VX.cpp"
--- /dev/null
+++ libs/poco-1.6.1/Foundation/src/SharedLibrary_ANDROID_STATIC.cpp
@@ -0,0 +1,119 @@
+//
+// SharedLibrary_ANDROID.cpp
+//
+// $Id: //poco/1.4/Foundation/src/SharedLibrary_ANDROID.cpp#3 $
+//
+// Library: Foundation
+// Package: SharedLibrary
+// Module:  SharedLibrary
+//
+// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
+// and Contributors.
+//
+// SPDX-License-Identifier:	BSL-1.0
+//
+
+
+#include "Poco/SharedLibrary_UNIX.h"
+#include "Poco/Exception.h"
+#include <dlfcn.h>
+
+
+// Note: cygwin is missing RTLD_LOCAL, set it to 0
+#if defined(__CYGWIN__) && !defined(RTLD_LOCAL)
+#define RTLD_LOCAL 0
+#endif
+
+
+namespace Poco {
+
+
+FastMutex SharedLibraryImpl::_mutex;
+
+
+SharedLibraryImpl::SharedLibraryImpl()
+{
+	_handle = (void *)1; // library is supposed to already be 
+                             // loaded in this implementation.
+}
+
+
+SharedLibraryImpl::~SharedLibraryImpl()
+{
+}
+
+
+void SharedLibraryImpl::loadImpl(const std::string& path, int flags)
+{
+	FastMutex::ScopedLock lock(_mutex);
+	_path = path;
+}
+
+
+void SharedLibraryImpl::unloadImpl()
+{
+	FastMutex::ScopedLock lock(_mutex);
+}
+
+
+bool SharedLibraryImpl::isLoadedImpl() const
+{
+	return _handle != 0;
+}
+
+
+void* SharedLibraryImpl::findSymbolImpl(const std::string& name)
+{
+	FastMutex::ScopedLock lock(_mutex);
+
+	void* result = 0;
+	if (_handle)
+	{
+		// The RTLD_DEFAULT handle employs the same rules used
+                // by the runtime linker to resolve any symbol reference
+                // from the calling object.
+                // This means that the library is statically linked and
+                // therefor it's already loaded.
+		result = dlsym(RTLD_DEFAULT, name.c_str());
+	}
+	return result;
+}
+
+
+const std::string& SharedLibraryImpl::getPathImpl() const
+{
+	return _path;
+}
+
+
+std::string SharedLibraryImpl::suffixImpl()
+{
+#if defined(__APPLE__)
+	#if defined(_DEBUG)
+		return "d.dylib";
+	#else
+		return ".dylib";
+	#endif
+#elif defined(hpux) || defined(_hpux)
+	#if defined(_DEBUG)
+		return "d.sl";
+	#else
+		return ".sl";
+	#endif
+#elif defined(__CYGWIN__)
+	#if defined(_DEBUG)
+		return "d.dll";
+	#else
+		return ".dll";
+	#endif
+#else
+	#if defined(_DEBUG)
+		return "d.so";
+	#else
+		return ".so";
+	#endif
+#endif
+}
+
+
+} // namespace Poco
--- /dev/null
+++ libs/poco-1.6.1/build/config/Android_static
@@ -0,0 +1,91 @@
+#
+# $Id: //poco/1.4/build/config/Android#3 $
+#
+# Android
+#
+# Make settings for Android NDK
+#
+
+#
+# General Settings
+#
+LINKMODE           ?= STATIC
+ANDROID_ABI        ?= armeabi
+POCO_TARGET_OSNAME  = Android
+POCO_TARGET_OSARCH  = $(ANDROID_ABI)
+
+ifeq ($(ANDROID_ABI),armeabi)
+TOOL      = arm-linux-androideabi
+ARCHFLAGS = -mthumb
+else
+ifeq ($(ANDROID_ABI),armeabi-v7a)
+TOOL      = arm-linux-androideabi
+ARCHFLAGS = -march=armv7-a -mfloat-abi=softfp
+LINKFLAGS = -Wl,--fix-cortex-a8
+else
+ifeq ($(ANDROID_ABI),x86)
+TOOL      = i686-linux-android
+ARCHFLAGS = -march=i686 -msse3 -mstackrealign -mfpmath=sse
+else
+$(error Invalid ABI specified in ANDROID_ABI)
+endif
+endif
+endif
+
+#
+# Define Tools
+#
+CC      = $(TOOL)-gcc
+CXX     = $(TOOL)-g++
+LINK    = $(CXX)
+STRIP   = $(TOOL)-strip
+LIB     = $(TOOL)-ar -cr
+RANLIB  = $(TOOL)-ranlib
+SHLIB   = $(CXX) -shared -Wl,-soname,$(notdir $@) -o $@
+SHLIBLN = $(POCO_BASE)/build/script/shlibln
+DEP     = $(POCO_BASE)/build/script/makedepend.gcc
+SHELL   = sh
+RM      = rm -rf
+CP      = cp
+MKDIR   = mkdir -p
+
+#
+# Extension for Shared Libraries
+#
+SHAREDLIBEXT     = .so.$(target_version)
+SHAREDLIBLINKEXT = .so
+
+#
+# Compiler and Linker Flags
+#
+CFLAGS          = $(ARCHFLAGS) -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64
+CFLAGS32        =
+CFLAGS64        =
+CXXFLAGS        = $(ARCHFLAGS) -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64 -frtti -fexceptions
+CXXFLAGS32      =
+CXXFLAGS64      =
+LINKFLAGS      += 
+LINKFLAGS32     =
+LINKFLAGS64     =
+STATICOPT_CC    = 
+STATICOPT_CXX   = 
+STATICOPT_LINK  = -static
+SHAREDOPT_CC    = 
+SHAREDOPT_CXX   = 
+SHAREDOPT_LINK  = -Wl,-rpath,$(LIBPATH)
+DEBUGOPT_CC     = -g -D_DEBUG
+DEBUGOPT_CXX    = -g -D_DEBUG
+DEBUGOPT_LINK   = -g
+RELEASEOPT_CC   = -O3 -DNDEBUG -fomit-frame-pointer
+RELEASEOPT_CXX  = -O2 -DNDEBUG -fomit-frame-pointer
+RELEASEOPT_LINK = -O2
+
+#
+# System Specific Flags
+#
+SYSFLAGS = -DPOCO_ANDROID_STATIC -DPOCO_ANDROID -DPOCO_NO_FPENVIRONMENT -DPOCO_NO_WSTRING -DPOCO_NO_SHAREDMEMORY
+
+#
+# System Specific Libraries
+#
+SYSLIBS  = -lstdc++ -lsupc++
